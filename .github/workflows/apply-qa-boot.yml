name: Apply QA Boot (no-node)
on:
  workflow_dispatch: {}   # Botón "Run workflow"

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-qa-boot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Write QA/CI scaffold (heredocs, idempotent)
        shell: bash
        run: |
          set -euo pipefail

          # 1) Carpetas necesarias
          mkdir -p .github/workflows tests/unit tests/a11y tests/e2e .github

          # 2) Archivos (crea/actualiza siempre con contenido conocido)
          cat <<'YAML' > .github/workflows/ci.yml
          name: CI
          on: [push, pull_request]
          jobs:
            ci:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-node@v4
                  with: { node-version: '20' }
                - run: npm ci || npm i
                - run: npm run lint
                - run: npm run typecheck
                - run: npm run test -- --coverage
                - run: npm run a11y:check
                - run: npm run build
                - run: npm run lhci
                - name: E2E
                  run: |
                    npx playwright install --with-deps
                    npm run e2e -- --reporter=line
          YAML

          cat <<'JSON' > lighthouserc.json
          {
            "ci": {
              "collect": { "staticDistDir": "dist" },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", { "minScore": 0.9 }],
                  "interactive": ["error", { "maxNumericValue": 200, "aggregationMethod": "p75" }],
                  "largest-contentful-paint": ["error", { "maxNumericValue": 2500, "aggregationMethod": "p75" }],
                  "cumulative-layout-shift": ["error", { "maxNumericValue": 0.1, "aggregationMethod": "p75" }],
                  "total-byte-weight": ["error", { "maxLength": 350000 }]
                }
              }
            }
          }
          JSON

          cat <<'JSON' > delivery.manifest.json
          {
            "name": "forgecraft-studio",
            "stack": ["vite","react","ts"],
            "routes": ["/","/generator","/projects"],
            "env_required": ["VITE_SUPABASE_URL","VITE_SUPABASE_ANON_KEY"],
            "scripts": ["dev","build","test","lint","e2e","lhci","format","typecheck","a11y:check"],
            "quality": { "coverage_min": 0.8, "lighthouse_min": 0.9, "axe_critical_violations": 0 }
          }
          JSON

          cat <<'ENV' > .env.example
          # Env de ejemplo (no subas .env reales)
          VITE_SUPABASE_URL=
          VITE_SUPABASE_ANON_KEY=
          ENV

          cat <<'JSON' > .stylelintrc.json
          {
            "extends": ["stylelint-config-standard", "stylelint-config-prettier"],
            "rules": {
              "selector-class-pattern": "^[a-z0-9\\-]+$",
              "no-descending-specificity": null
            }
          }
          JSON

          cat <<'JSON' > .prettierrc
          { "singleQuote": true, "trailingComma": "all", "printWidth": 100, "semi": true }
          JSON

          cat <<'ECONF' > .editorconfig
          root = true
          [*]
          charset = utf-8
          end_of_line = lf
          indent_style = space
          indent_size = 2
          insert_final_newline = true
          trim_trailing_whitespace = true
          ECONF

          cat <<'MD' > .github/PULL_REQUEST_TEMPLATE.md
          ## Descripción
          - [ ] Cambios principales

          ## Checklist de calidad
          - [ ] Tests unitarios (coverage >= 80%)
          - [ ] A11y (jest-axe sin críticos)
          - [ ] E2E básicos verdes
          - [ ] LHCI (perf >= 0.9, interactive p75 <= 200ms)
          - [ ] Typecheck sin errores
          - [ ] Documentación/README actualizada

          ## Evidencias
          MD

          echo "* @Marc-Comas" > CODEOWNERS

          # vitest.config.ts solo si no existe
          if [ ! -f vitest.config.ts ]; then
            cat <<'TS' > vitest.config.ts
            import { defineConfig } from 'vitest/config';
            export default defineConfig({
              test: { environment: 'jsdom', setupFiles: ['./tests/setup-tests.ts'] }
            });
            TS
          fi

          cat <<'TS' > tests/setup-tests.ts
          import '@testing-library/jest-dom';
          TS

          cat <<'TS' > tests/a11y/a11y.smoke.test.ts
          import { describe, it, expect } from 'vitest';
          import { render } from '@testing-library/react';
          import { axe, toHaveNoViolations } from 'jest-axe';
          import App from '../../src/App';
          expect.extend(toHaveNoViolations);
          describe('A11y smoke', () => {
            it('App no tiene violaciones críticas', async () => {
              const { container } = render(<App />);
              const results = await axe(container);
              const criticals = results.violations.filter(v => v.impact === 'critical');
              expect(criticals).toHaveLength(0);
            });
          });
          TS

          cat <<'TS' > playwright.config.ts
          import { defineConfig, devices } from '@playwright/test';
          export default defineConfig({
            testDir: './tests/e2e',
            timeout: 30000,
            use: { baseURL: 'http://localhost:4173', trace: 'on-first-retry' },
            webServer: { command: 'npm run preview', url: 'http://localhost:4173', reuseExistingServer: !process.env.CI },
            projects: [{ name: 'chromium', use: { ...devices['Desktop Chrome'] } }]
          });
          TS

          cat <<'TS' > tests/e2e/smoke.spec.ts
          import { test, expect } from '@playwright/test';
          test('home carga y muestra título', async ({ page }) => {
            await page.goto('/');
            const title = page.locator('h1, [data-testid="title"], [role="heading"]');
            await expect(title).toBeVisible();
          });
          test('ruta desconocida muestra 404 o fallback', async ({ page }) => {
            await page.goto('/_noexiste_');
            const fallback = page.locator('text=404').or(page.locator('[data-testid="not-found"]'));
            await expect(fallback).toBeVisible({ timeout: 5000 });
          });
          TS

          # 3) .gitignore (sin duplicados)
          touch .gitignore
          for L in node_modules dist .env playwright-report test-results lhci_reports; do
            grep -qxF "$L" .gitignore || echo "$L" >> .gitignore
          done

      - name: Update package.json scripts with jq (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          test -f package.json
          sudo apt-get update -y && sudo apt-get install -y jq
          tmp=$(mktemp)
          jq '
            .scripts = (.scripts // {}) |
            .scripts.dev //= "vite" |
            .scripts.build //= "vite build" |
            .scripts.preview //= "vite preview" |
            .scripts.test //= "vitest run" |
            .scripts["test:watch"] //= "vitest" |
            .scripts.typecheck //= "tsc --noEmit" |
            .scripts.lint //= "eslint . --ext .ts,.tsx --max-warnings 0" |
            .scripts.format //= "prettier --check ." |
            .scripts["format:write"] //= "prettier --write ." |
            .scripts["a11y:check"] //= "vitest run tests/a11y --reporter=dot" |
            .scripts.e2e //= "playwright test" |
            .scripts.lhci //= "lhci autorun"
          ' package.json > "$tmp" && mv "$tmp" package.json

      - name: Install dev dependencies (lockfile incluido en el PR)
        run: |
          npm i -D vitest @testing-library/react @testing-library/jest-dom jest-axe @types/jest-axe jsdom \
            @playwright/test playwright @lhci/cli prettier stylelint stylelint-config-standard stylelint-config-prettier \
            eslint-plugin-jsx-a11y wait-on

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: QA boot (CI, tests, a11y, e2e, lhci, manifest)"
          branch: chore/qa-boot
          title: "chore: QA boot (CI, tests, a11y, e2e, lhci, manifest)"
          body: |
            Este PR añade:
            - CI con gates (lint, typecheck, unit+coverage, a11y, build, LHCI, e2e)
            - lighthouserc.json (INP/LCP/CLS + budgets)
            - tests unit/a11y/e2e y config Playwright
            - delivery.manifest.json, .env.example, .editorconfig, .stylelintrc, PR template, CODEOWNERS
            - Scripts añadidos a package.json
          labels: enhancement, qa
